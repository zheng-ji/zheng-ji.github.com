<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programe | 织网]]></title>
  <link href="http://zheng-ji.github.com/blog/categories/programe/atom.xml" rel="self"/>
  <link href="http://zheng-ji.github.com/"/>
  <updated>2015-10-01T10:27:03+08:00</updated>
  <id>http://zheng-ji.github.com/</id>
  <author>
    <name><![CDATA[zheng-ji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[轻巧实时统计用户数]]></title>
    <link href="http://zheng-ji.github.com/blog/2015/06/11/qing-qiao-shi-shi-tong-ji-yong-hu-shu/"/>
    <updated>2015-06-11T23:14:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2015/06/11/qing-qiao-shi-shi-tong-ji-yong-hu-shu</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>

<p>最近在优化一个短地址的统计服务，之前是使用 Cookie 来做统计每天的UV，而且这个需求是近乎实时的，
业务方需要每5分钟就能看到最新统计结果。但有些情况我们是取不到Cookie的，比如服务器对服务器的狂刷访问，那么UV就计算不准确，
是时候要改造方案了。</p>

<p>后来我用 IP+UserAgent 来识别用户，从而统计 UV。好了，接下来你会怎么做这个实时统计呢？</p>

<h2 id="section-1">两个方案的选择</h2>

<ul>
  <li>Plan A：</li>
</ul>

<p>将每天的 <code>IP+UA</code> 存进 Redis 的 Set 集合里，它会自动去重，然后计算该集合里元素的个数得到结果，此方案似乎不错，
但真的好吗？假如每天大概有200W个UV，1个用户标识<code>IP+UA</code>需要大概150个字节，那么大约要耗费300MB的内存。</p>

<p>觉得内存太宝贵，应该有更好的方法，想起了位运算， 于是就有了</p>

<ul>
  <li>Plan B:</li>
</ul>

<p>将 <code>IP+UA</code> 组合成的字符串哈希成一个数值，然后借助 Redis 的 BitSet 数据结构求出<code>UV</code>。以下是伪代码</p>

<p>```
conn = redis()
index = hash(UA+IP)
key = “xxx_2015-05-10”
conn.do(‘SETBIT’, key, index, 1) # 将该hash值对应的位赋值为1</p>

<p>realtime_uv = conn.do(‘BITCOUNT’, key) # 得到实时的uv
```</p>

<p>根据业务的情况，我的hash桶开了200W个位，大概需要消耗2M的内存，的确节约不少空间，位运算的效率也很快。
于是欣然选择 Plan B</p>

<h2 id="section-2">一些链接</h2>

<ul>
  <li><a href="https://redis.readthedocs.org/en/2.4/set.html">Redis Set</a></li>
  <li><a href="http://redis.io/commands/SETBIT">Redis BitSet</a></li>
  <li><a href="http://blog.nosqlfan.com/html/3501.html">NoSQLFan 一个文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现一个智能提示框功能]]></title>
    <link href="http://zheng-ji.github.com/blog/2015/02/08/trie-suggestion/"/>
    <updated>2015-02-08T13:40:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2015/02/08/trie-suggestion</id>
    <content type="html"><![CDATA[<p>耗了3个夜晚出来的东西.</p>

<p>先上图吧：</p>

<p><img src="/images/2015/02/suggest.png"></p>

<p>是的，就是这样一个类似百度框的联想提升功能，让我纠结了几个晚上，在实现成功的那一瞬间，着实感受到编程之美。很享受为了一个小idea折腾的酣畅淋漓的过程。</p>

<p>起因: 在公司<code>GitLab</code>看到有这人对内部管理系统提出了这个需求，但是一直没有被<code>close</code>, 我觉得应该挺有趣的，好奇心驱动下就开始搞了。</p>

<p>如果仅仅是实现这个需求，应该有很多种</p>

<ul>
  <li>方法一：使用一个hash,将关键字填入key，如果采用此法，数据量大的时候估计堪忧，以一个汉字2个Byte计算的话，1kw个词条，1个词条10个词语的话需要占用大于200M内存。</li>
  <li>方法二：前缀匹配，那么应该怎么选择数据结构,朴素的做法是O(N^N),我们肯定采用复杂度较优的Trie树  O(1)</li>
  <li>方法三：Radix Tree 据说这个是linux cache的一个算法。看了几个小时，真心复杂，不得不佩服内核开发者！</li>
</ul>

<h3 id="trie">讲一讲<code>trie</code>树吧</h3>

<p><img src="/images/2015/02/triestruct.png"></p>

<ul>
  <li>根节点不包含字符，除根节点外的每一个子节点都包含一个字符。</li>
  <li>根节点到某一节点，路径上经过的字符连接起来，就是该节点对应的字符串。</li>
  <li>每个单词的公共前缀作为一个字符节点保存。</li>
  <li>叶子节点的指针是空的</li>
</ul>

<p>以下是具体的数据结构代码</p>

<p><code>
type Node struct {
    Link     map[string]*Node  #指针
    Key      string                     #每个节点的字符
    IsLeaf   bool                       #是否叶子节点 
    Weight   float64                    #权重
    LongWord string                     #从根节点到该节点的长字符
}
</code></p>

<p>围绕这个数据结构做了
构建树，删除节点，添加节点，获取子节点等</p>

<h3 id="section">知识铺垫：</h3>
<p>在用 Go 语言处理中文字符的时候，需要特别使用 []rune数组，看以下示范代码就知道了,他把中文处理成1个字符表现的编码方式了。正式我们下列处理Trie需要用到的。</p>

<p>```
package main
import “fmt”</p>

<p>func main () {
    m_str := “编程”
    fmt.Println(“fmt:”, m_str)
    m_str_rune := []rune(m_str)
    fmt.Println(“fmt:”, m_str_rune)
    m_str_byte := []byte(m_str)
    fmt.Println(“fmt:”, m_str_byte)
}</p>

<p>$ ./test_rune
fmt: 编程
fmt: [32534 31243]
fmt: [231 188 150 231 168 139]
```</p>

<h3 id="section-1">测试结果：</h3>
<p>导入100W条词条,搜索的反应是瞬秒，1ms返回响应，在4G的机器上，整个程序占用内存0.3%。</p>

<hr />

<p>每个成熟的互联网产品，背后都是工程师耗费一点一滴思维的结晶构建而成的。对待技术不得不敬畏。</p>

<p><a href="https://github.com/zheng-ji/trietips">代码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Protobuf]]></title>
    <link href="http://zheng-ji.github.com/blog/2014/07/12/goan-zhuang-protobuf/"/>
    <updated>2014-07-12T17:39:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2014/07/12/goan-zhuang-protobuf</id>
    <content type="html"><![CDATA[<p>protobuf 是谷歌出品的，质量就无需质疑了，广泛运用于工业界
优点简而言之是：</p>

<ul>
  <li>二进制，速度快，便于拓展；</li>
  <li>自动生成代码接口，支持多语言</li>
</ul>

<p>对于第一点, 貌似优秀的开源代码没这么干都不好意思开放。</p>

<h3 id="section">安装</h3>

<p>比较蛋疼,折腾一小段时间。</p>

<p>```
go get code.google.com/p/goprotobuf/{proto, protoc-gen-go}</p>

<p>go install code.google.com/p/goprotobuf/proto</p>

<p>sudo apt-get install protobuf-compiler
```</p>

<h3 id="section-1">使用</h3>

<p>是在项目内部新建一个proto.文件, 然后执行</p>

<p><code>
protoc --go_out=. xxx.proto
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作 setup.py]]></title>
    <link href="http://zheng-ji.github.com/blog/2014/05/03/make-setup-dot-py/"/>
    <updated>2014-05-03T11:52:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2014/05/03/make-setup-dot-py</id>
    <content type="html"><![CDATA[<p>做好一个 Python Module 之后，可以把源代码包含进项目中。但是如果有很多依赖项目的话就不好管理了，这个时候我们用 setuptools 工具来安装到系统的包。</p>

<h3 id="section">制作与安装</h3>

<p>以下给出一个 demo </p>

<p><code>
mkdir hacker
vim foo.py
</code></p>

<p>编辑 foo.py </p>

<p><code>python
class Hacker():
    def __init__(self):
        self.motto = "No evil, Be Hacker"
    def printMotto(self):
        print self.motto
</code></p>

<p>开始编写 setup.py, 也许是为了知识产权保护，里面按照规矩会让作者填上资料。</p>

<p><code>python
from distutils.core import setup
setup(name='Hacker',
        version='1.0',
        description='be hake or be hacked',
        author='zheng-ji',
        author_email='zhengji91@gmail.com',
        url='http://zheng-ji.info',
        py_modules=['foo'],
        install_requires=["requests"]
     )
</code></p>

<p>好了，这个时候执行,</p>

<p><code>
sudo python setup.py install
</code></p>

<p>该命令，会把模块复制到 <code>/usr/lib/python2.7/</code> 下面. 之后可以直接 import foo, 使用该模块。</p>

<h3 id="section-1">删除</h3>

<p><code>
python setup.py install --record files.txt
cat files.txt | xargs rm -rf
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 安装 Go]]></title>
    <link href="http://zheng-ji.github.com/blog/2014/05/03/mac-an-zhuang-go/"/>
    <updated>2014-05-03T09:32:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2014/05/03/mac-an-zhuang-go</id>
    <content type="html"><![CDATA[<p>修改 <code>~.zshrc</code>, 添加以下环境变量</p>

<p><code>
export GOROOT=$HOME/go
export GOBIN=$GOROOT/bin
export PATH=$PATH:$GOBIN
export GOPATH=/Users/zj/workspace/gocode
</code></p>

<p>开始安装,耗时有点久
保证你的电脑安装有 hg, 如果没有, 请执行 </p>

<p><code>
sudo easy_install mercurial
hg clone -u release https://code.google.com/p/go
cd go/src
./all.bash
</code></p>

<p>开始检验, 执行 go , 出现一系列 Usage信息就算通过了 ：）。</p>

]]></content>
  </entry>
  
</feed>
