<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NetWork | 织网]]></title>
  <link href="http://zheng-ji.github.com/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://zheng-ji.github.com/"/>
  <updated>2015-02-06T00:18:14+08:00</updated>
  <id>http://zheng-ji.github.com/</id>
  <author>
    <name><![CDATA[zheng-ji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[socket黏包引发的YY]]></title>
    <link href="http://zheng-ji.github.com/blog/2014/02/24/socketnian-bao/"/>
    <updated>2014-02-24T23:11:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2014/02/24/socketnian-bao</id>
    <content type="html"><![CDATA[<p>这段时间在帮朋友写一个网络程序, 这个过程中重温了原生的socket编程, 在调试中遇到了一些问题，为此好好回顾了计算机网络, 学生时代学的不好啊！ 并由此引出的思考, 遂做笔记如下。</p>

<p>如果你也写过socket程序，作为一个没有太多经验的人，有时候你会发现明明要发送的数据只发送了一部分；或者接收到的数据里面包含发送端几次发送过来的数据。于是悲剧就发生在一行行 debug 之中，特别是夜深人静的时候，双眼泛着血丝, 带着一阵阵脊椎的刺痛。</p>

<p>后来从 Google 那里知道前者是粘包，后者是半包状况。</p>

<h3 id="section">什么是粘包和半包</h3>
<p>为什么会出现粘包与半包状况，是因为 TCP 是基于数据流的传输协议，通常是建立连接之后，就持续的像水流一样发送数据，直到关闭连接，也就是我们传说中的长连接. (PS: HTTP 1.1以后keep alive也是保持长连接，无状态与否是业务层面来决定的，比如HTTP 本身是无状态的，但我们可以通过 Cookie Session 来使其有状态, HTTP 其下层 协议是 TCP，两者本身没有可比性。)</p>

<p><strong>粘包</strong>：发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾, 导致了接收的数据冗杂</p>

<p><strong>半包</strong>: 接收方没有接收完整的一个包。</p>

<h3 id="section-1">可能导致的原因</h3>

<ul>
  <li>
    <p>粘包可能是 TCP 协议造成的，TCP 为提高传输效率(优化算法)，发送方往往会收集足够多的数据才发送一包数据，导致了接收方粘包。或者是由于接收方进程来不及接收数据，导致数据在接收端缓冲区黏住了。</p>
  </li>
  <li>
    <p>半包可能是因为TCP为提高传输效率, 分配一个足够大的包，导致发送端的数据太大，以至于接收方并不一定能一次接受完。</p>
  </li>
</ul>

<h3 id="section-2">怎么避免</h3>
<p>我们需要了解的网络知识是。Socket内部默认的收发缓冲区大小是8k左右， 根据业务重新配置这个值，让系统达到最佳状态, 可以用SetSockOpt 函数配置。</p>

<p>在谈及TCP/UDP 发包的时候，势必需要了解 IP 层和链路成会将包分片发送, 如果分片的大小太大就可能导致丢包的几率大， 特别是对于 UDP 这样不可靠的传输协议, 包太小又导致效率低， 广域网的分片大小是几十字节，</p>

<p>好了，该谈谈怎么避免粘包和半包。
如果你阅读过网络通信的代码，你大概会看到一个包的设计通常会由 Header 部分和 Body 部分，Header 部分通常会有一个域叫做消息长度，通常是为了给接收端做预处理用的. 曾经天真的以为这样的设计是多余的。</p>

<p>通常是 包头+包长+包体 的协议形式(好吧扯淡这么多这是个重点)，当服务器端获取到指定的包长时才说明获取完整。</p>

<h3 id="section-3">接收端的处理</h3>
<p>发包的时候一旦有包的长度那么接收方可以按长度组合。</p>

<ul>
  <li>TCP 作为面向连接的数据流协议， 是像水流一样发包，不会整个包到达。</li>
  <li>UDP 是数据报的协议， 接收端是整包到达的。 </li>
</ul>

<p>你会问，如果接收端的缓冲区比较小，处理 TCP 的时候可以持续收数据，返回实际接受的长度， 这点在使用 epoll 边缘触发的时候需要特别注意，它只被内核唤醒一次状态的改变。而 UDP 由于是整个包接收的，大于接收端缓冲区的数据就会被丢弃返回 WSAEMSGSIZE 。 </p>

<p>感觉这样的理解是可以对面向数据流的TCP连接与数据报的UDP连接有更深的认识。</p>

<h3 id="section-4">实时网游中多数使用什么网络协议呢</h3>
<p>这几天一直在抠网络的知识，然后也思考这个问题，虽然以前也想过。</p>

<p>TCP 是可靠的传输协议，他具有超时重传， 拥塞控制， 流量控制等，这是靠协议来保证的，因此他的数据传输会有一定的代价 ，体现在传输的开销以及时延会比UDP大， UDP 仅仅是将数据包提供给对方，不做任何多余(可能这个词用的不好)的协议上保障。 </p>

<h4 id="section-5">我们来假设这样的场景：</h4>

<p>一个实时网络游戏上，玩家A发包给玩家B，如果采用TCP 协议， 因为网络波动 TCP 会超时重传导致数据发送延迟，导致 玩家B在做下一个动作的时候收到的还是上次动作的消息，这对用户体验不利。 反之如果是 UDP 的话，由于其开销小，而且尽力而为将数据发送给玩家B， 碰到丢包的时候就忽略之，只要新的包能被接收到用户也是无痛感知的。如果真的需要保证安全性，我们可以兼用TCP 来做一些道具购买这样的安全性功能, 保证消息的可靠传输。</p>

<p>遗憾的是， 我没做过网游，只能自己YY, 很多时候看不懂大神云风的博客，就一点点去抠去代入，终究还是觉得环境很重要, 如果有一天能将其所有文章都领会我想会是件令人高兴的事。 我又YY了。。。</p>

<p>夜深了,晚安, 愿有梦的程序猿好梦。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZeroRPC-基于ZMQ的RPC通讯库]]></title>
    <link href="http://zheng-ji.github.com/blog/2013/09/29/zerorpcshi-ge-hao-dong-xi/"/>
    <updated>2013-09-29T20:56:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2013/09/29/zerorpcshi-ge-hao-dong-xi</id>
    <content type="html"><![CDATA[<p><a href="https://www.dotcloud.com/">dotCloud</a> 是一家具有伟大基因的公司,我认为的伟大是有着开源贡献的情怀，就像Amazon,Google等，而不是国内的某些巨头，虽然作为新兴的云服务提供商还不足以比肩巨头，致力于用技术解决公司的运营问题的同时也回馈社会，让我为之喝彩.我也有理由相信这样的公司会走的更远，因为他们有胸怀有远见，是否重视技术就更不言而喻了.</p>

<p>这篇文章旨在介绍由<strong>dotCloud</strong>开源的<a href="https://github.com/dotcloud/zerorpc-python">ZeroRpc</a>,在dotcloud公司的基础服务得到很大应用，在阅读其manual之后更是被其简洁明了的使用方法所吸引 
&gt;ZeroRPC is a modern communication layer for distributed systems built on top of ZeroMQ,</p>

<p>一直以来我一直喜欢python 的简洁，用过ZeroMQ做过网络通讯方面的编程，也使用RPC 做过远程过程调用，上次使用LevelDB的RPC是用python的[第三方库] (https://github.com/dotcloud/zerorpc-python)</p>

<p>这次刚好在Github上面看到这样的好玩意，便想与大家分享,ZeroRpc不仅仅支持代码层面的调用，也支持CLi， 这种设计本身就很有弹性.赞！</p>

<p>安装zerorpc</p>

<p><code>
sudo pip install zerorpc 
</code></p>

<p>在还没开始看demo之前
我们需要了解ZeroRpc是由三层架构组成：</p>

<ul>
  <li>传输层是使用<a href="http://www.zeromq.org/">ZMQ</a> 以及msgpack(http://msgpack.org/),基于ZeroMQ的分布式通讯层,通讯的数据被MsgPack 序列化过所以更快</li>
  <li>消息层,比较复杂,处理heartbeat, multiplexing, and events.</li>
  <li>RPC层:处理请求,响应</li>
</ul>

<p>官方的<a href="http://zerorpc.dotcloud.com/">文档</a>给出以下demo</p>

<h4 id="serverpy">server.py</h4>

<p>```python
import zerorpc
class HelloRPC(object):
    def hello(self, name):
        return “Hello, %s” % name</p>

<p>s = zerorpc.Server(HelloRPC())
s.bind(“tcp://0.0.0.0:4242”)
s.run()
```</p>

<h4 id="clientpy">client.py</h4>

<p>```python
import zerorpc</p>

<p>c = zerorpc.Client()
c.connect(“tcp://127.0.0.1:4242”)
print c.hello(“RPC”)
```
client也可用命令行代替</p>

<p><code>python
zerorpc tcp://127.0.0.1:4242 hello RPC
</code></p>

<p>够简明易懂了吧
再来一个返回连续字节流的例子</p>

<h4 id="serverpy-1">server.py</h4>

<p>```python
import zerorpc</p>

<p>class StreamingRPC(object):
    @zerorpc.stream
    def streaming_range(self, fr, to, step):
        return xrange(fr, to, step)</p>

<p>s = zerorpc.Server(StreamingRPC())
s.bind(“tcp://0.0.0.0:4242”)
s.run()
```</p>

<h4 id="clientpy-1">client.py</h4>

<p>```python
import zerorpc</p>

<p>c = zerorpc.Client()
c.connect(“tcp://127.0.0.1:4242”)</p>

<p>for item in c.streaming_range(10, 20, 2):
    print item
```</p>

<p>client也可用命令行代替,–json 表示头部是一个json对象</p>

<p><code>
zerorpc tcp://127.0.0.1:4242 streaming_range 10 20 2 --json
</code></p>

<p>Happy Hacking</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leveldb的RPCServer]]></title>
    <link href="http://zheng-ji.github.com/blog/2013/09/21/leveldbde-rpcserver/"/>
    <updated>2013-09-21T11:33:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2013/09/21/leveldbde-rpcserver</id>
    <content type="html"><![CDATA[<p>leveldb作为一个高性能的存储引擎，并不提供Server以及网络的功能，但我坚信一定会有，因为这个世界有很多人会被其性能所吸引，总有人忍不住会写一个壳包装下，万能的github让我不用重复造轮子。<a href="https://github.com/srinikom/leveldb-server">这个</a> ,还有<a href="https://github.com/quiver/leveldb-rpc/">这个</a></p>

<p>XML RPC 的代码很简单，但可以从中学到了不少东西的,主要使用的是 python 的<a href="http://zheng-ji.info//blog/2013/09/21/leveldbben-di-cun-chu-yin-qing-jing-zhi-de-gong-ju/">leveldb binding</a> </p>

<h4 id="serverpy">server.py</h4>

<p>```python
‘'’XML-RPC server for leveldb
‘’’
import argparse
from SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler</p>

<p>import leveldb</p>

<p>class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = (‘/RPC2’,)</p>

<p>class LevelDBMethod(object):
    def <strong>init</strong>(self, datadir):
        self.db = leveldb.LevelDB(datadir)</p>

<pre><code>def put(self, key, value):
    return self.db.Put(key, value)

def get(self, key):
    try:
    return self.db.Get(key)
    except KeyError, err:
    return ''

def delete(self, key):
    return self.db.Delete(key)
</code></pre>

<p>def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(‘–port’, type=int, nargs=’?’, default=8000)
    parser.add_argument(‘–datadir’, type=str, nargs=’?’, default=’data’)
    args = parser.parse_args()</p>

<pre><code># Create server
server = SimpleXMLRPCServer(("localhost", args.port),
            requestHandler=RequestHandler,
            allow_none=True)
server.register_introspection_functions()
server.register_instance(LevelDBMethod(args.datadir))
server.serve_forever()
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    main()
```</p>

<h4 id="clientpy">client.py</h4>

<p>```python
‘'’XML-RPC client for leveldb
‘’’</p>

<p>import argparse
import cmd
from xmlrpclib import ServerProxy</p>

<p>class Cmd(cmd.Cmd):
    def <strong>init</strong>(self, host, port, *args, **kw):
        cmd.Cmd.<strong>init</strong>(self, *args, **kw)
        self.prompt = ‘%s:%d&gt; ‘ % (host, port)
        self.server = ServerProxy(‘http://%s:%d’ % (host, port))</p>

<pre><code>def do_put(self, arg):
    args = arg.split()
    if len(args) != 2:
        print "(error) ERR wrong number of arguments for 'put' command"
        return
    key, value = args
    result = self.server.put(key, value)

def do_get(self, arg):
    args = arg.split()
    if len(args) != 1:
        print "(error) ERR wrong number of arguments for 'get' command"
        return
    key, = args
    result = self.server.get(key)
    if result:
        print result

def do_delete(self, arg):
    args = arg.split()
    if len(args) != 1:
        print "(error) ERR wrong number of arguments for 'delete' command"
        return
    key, = args
    result = self.server.delete(key)

def do_EOF(self, arg):
    return True
</code></pre>

<p>def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(‘–host’, type=str, nargs=’?’, default=’localhost’)
    parser.add_argument(‘–port’, type=int, nargs=’?’, default=8000)
    args = parser.parse_args()</p>

<pre><code>cmd = Cmd(args.host, args.port)
cmd.cmdloop()
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    main()
```</p>

<h4 id="server">Server代码:</h4>
<ul>
  <li>SimpleXMLRpcServer拓展,自定义业务逻辑类 LevelDBMethod,以及RPC运行路径别名,注册业务代码</li>
</ul>

<p><code>python
 # Create server
server = SimpleXMLRPCServer(("localhost", args.port),
        requestHandler=RequestHandler,
        allow_none=True)
server.register_introspection_functions()
server.register_instance(LevelDBMethod(args.datadir))
server.serve_forever()
</code></p>

<ul>
  <li>argsparse解析命令行参数 </li>
  <li>包装leveldb ,公开RPC函数调用</li>
</ul>

<h4 id="client">Client代码:</h4>
<ul>
  <li>调用xmprpclib 的ServerProxy，完成网络RPC调用</li>
</ul>

<p><code>python
self.server = ServerProxy('http://%s:%d' % (host, port))
</code></p>

<ul>
  <li>cmd模块，自定义命令行提示工具,调用cmdloop() 实现循环调用,继承cmd.Cmd类时，函数名为do_动作名</li>
  <li>argsparse解析命令行参数 </li>
</ul>

<p><code>python
parser = argparse.ArgumentParser()
parser.add_argument('--host', type=str, nargs='?', default='localhost')
parser.add_argument('--port', type=int, nargs='?', default=8000)
args = parser.parse_args()
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsonp解决跨域请求]]></title>
    <link href="http://zheng-ji.github.com/blog/2013/09/15/jsonpjie-jue-kua-yu-qing-qiu/"/>
    <updated>2013-09-15T21:50:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2013/09/15/jsonpjie-jue-kua-yu-qing-qiu</id>
    <content type="html"><![CDATA[<p>昨天搞了一整天js,遇到了各种我从没遇到的问题,真心觉得前端工程师是很厉害的。想不出为什么会有人说所谓的前端“无技术含量”的源论.前端要考虑的东西实在是多，也有其架构设计。特别是js. 我用的是phonegap + jqtouch做移动App</p>

<p>场景是：
客户端使用Ajax技术向服务器发送请求，然后拉取数据</p>

<p>Server端代码是php写的,</p>

<p><code>php
$arr = array(
        'user'=&gt;'123',
        'friends' =&gt; 234
        )
echo json_encode($arr);
</code></p>

<p>js代码,使用jquery发起get 请求,文件路径E:/mytest/test.html</p>

<p><code>javascript
$(function(){
    url = "http://127.0.0.1/test.php"
    $.get(url,funtion(result) {
        alert(result);
    })
);
</code></p>

<p>看过jquery文档之后，我以为这样会返回我要的数据，真是图样图森破，chrome的控制台返回：不是同一个源，不允许跨域发请求。 </p>

<h5 id="section">什么是跨域请求</h5>
<p>简单来说：a.com 域名下的js无法操作b.com或是c.a.com域名下的对象,上述场景中，http://127.0.0.1/test.php 和 E：/mytest/test.html本身就不属于同一个域下，因此不能访问。浏览器本身有同源策略，当初设计是出于安全考虑，百度给出了解释是：
&gt;　同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指，域名，协议，端口相同。当一个浏览器的两个tab页中分别打开来 百度和谷歌的页面当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。</p>

<p>我最后是通过查阅资料,采用jsonp的方式解决</p>

<h5 id="jsonp">什么是jsonp</h5>
<blockquote>
  <p>　JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式） - 百度</p>
</blockquote>

<p>因此最后的Server端代码是php写的</p>

<p><code>python
$arr = array(
        'user'=&gt;'123',
        'friends' =&gt; 234
        )
$callback = $_GET['callback']; //新加
echo $callback.json_encode($arr);
</code></p>

<p>js代码,请求的时候，加入一个参数callback,通过javascripte callback形式调用服务器的scrpt tags的返回值</p>

<p><code>javascript
$(function(){
    url = "http://127.0.0.1/test.php?callback=?"
    $.get(url,funtion(result) {
        alert(result);
    }));
</code></p>

<p>调用成功
这个东西纠结我大半天。但是有收获的 ：）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回顾 ZeroMQ]]></title>
    <link href="http://zheng-ji.github.com/blog/2013/06/29/hui-gu-zeromq/"/>
    <updated>2013-06-29T23:25:00+08:00</updated>
    <id>http://zheng-ji.github.com/blog/2013/06/29/hui-gu-zeromq</id>
    <content type="html"><![CDATA[<p>今日在整理曾经的学习笔记，看到了ZeroMQ，号称史上最快消息内核。曾经在一创业公司用其开发过一些<a href="https://github.com/zheng-ji/log2aws">后端服务</a>。当时用Go语言实现 源代码,使用的便是<a href="https://github.com/alecthomas/gozmq">gozmq库</a>.这个消息通信框架库的文章有很多，比较著名的当属<a href="www.searchtb.com/2012/08/zeromq-primer.html">一淘</a>的，（技术文章这样写，的确是让读者舒服 ：））还有官方文档</p>

<h4 id="section">优点：</h4>
<ul>
  <li>
    <p>高度封装。
它处于会话层之上，应用层之下，你不需要自己写一行的socket函数调用就能完成复杂的网络通信工作。</p>
  </li>
  <li>
    <p>点对点的消息传输上。
传统的消息队列都需要一个消息服务器来存储转发消息。而ZeroMQ则把侧重点放在了点对点的消息传输上。ZeroMQ能缓存消息，但是是在发送端缓存。ZeroMQ里有水位设置的相关接口来控制缓存量。当然，ZeroMQ也支持传统的消息队列（通过zmq_device来实现）。这样使得客户端在重启的时候可以重新发送上次未发送成功的消息</p>
  </li>
  <li>
    <p>灵活的收发模式。
REQ-REP 请求响应模式，PUSH-PULL： 推拉模式， PUB-SUB： 发布订阅模式 等。 其中任何一方都可以作为服务端</p>
  </li>
  <li>
    <p>以统一接口支持多种底层通信方式
支持线程间通信，进程间通信，跨主机通信，假如你想把本机多进程的软件放到跨主机的环境里去执行，通常要将IPC接口用套接字重写一遍。非常麻烦。而有了ZeroMQ就方便多了，只要把通信协议从”ipc:///xxx”改为”tcp://<em>.</em>.<em>.</em>:<em>**</em>”就可以了，其他代码通通不需要改，如果这个是从配置文件里读的话，那么程序就完全不要动了，直接复制到其他机器上就可以了。</p>
  </li>
  <li>
    <p>异步高效。
ZeroMQ为了高性能的消息发送而服务的，它发送消息是异步模式，通过单独出一个IO线程来实现，要把资源释放函数交给ZeroMQ让ZeroMQ发完消息自己释放，所以消息发送调用之后不要立刻释放相关资源。</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
